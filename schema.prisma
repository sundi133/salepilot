generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Apikeys {
  id           Int    @id @default(autoincrement())
  orgId        String
  type         String
  key          String
  creatorEmail String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Contact {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String?
  phone           String?
  company         String?
  jobTitle        String?
  companyWebsite  String?
  linkedIn String?
  groups          Group[]           @relation("ContactGroups")
  orgId String
  userId String?
  tags String?
  creatorEmail String?
  creatorName String?
  apolloData      Json?
  scaleserpData Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  EmailEvent      EmailEvent[]
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  orgId String
  userId String?
  contacts    Contact[] @relation("ContactGroups")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Campaign {
  id             Int               @id @default(autoincrement())
  name           String
  templateId     Int
  status         String
  scheduledTime  DateTime?
  sentTime       DateTime?
  orgId String
  userId String?
  numUsers Int?
  template       Template          @relation(fields: [templateId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  EmailEvent     EmailEvent[]
  CampaignMetric CampaignMetric[]
}

model Template {
  id        Int        @id @default(autoincrement())
  name      String
  content   String
  campaignType String
  creatorEmail String?
  creatorName String?
  tone String?
  maxWords Int?
  minWords Int?
  campaigns Campaign[]
  orgId String
  userId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EmailEvent {
  id         Int      @id @default(autoincrement())
  campaignId Int
  contactId  Int
  eventContent String
  eventType  String
  eventTime  DateTime @default(now())
  orgId String
  userId String?
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  contact    Contact  @relation(fields: [contactId], references: [id])
  commonAttributes String?
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  orgId String
  userId String
  apolloData Json?
  creatorEmail String
  creatorName String

  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  
}
model CampaignMetric {
  id             Int      @id @default(autoincrement())
  campaignId     Int
  contactsSent   Int
  openRate       Float
  clickRate      Float
  bounceRate     Float
  conversionRate Float
  orgId String
  userId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  campaign       Campaign @relation(fields: [campaignId], references: [id])
}
